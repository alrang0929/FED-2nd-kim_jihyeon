@charset "UTF-8";
/* 주석2 */
/************************************************************************************ 

        [SASS 핵심 사용법]

    1. sass 확장자별 파일 구분
        1) .scss : sass 관리파일
           -> .sass확장자는 중괄호,세미클론을 사용하지 않는 문법
           우리는 scss확장자를 사옹
        2) .css.map : sass파일과 css 연결파일
        3) .css : 실제 적용되는 컴파일된 css

    2. 사스파일 컴파일하기
        Live Sass Compiler 확장 프로그램 설치 후 하단 "watch sass"클릭하여 작동
        -> 에러가 없음 : 컴파일하여 동일한 이름의 css 파일을 생성 (=> watching.. 상태가됨)
        -> 에러발생시 : 컴파일 안됨, cmd창에 에러메세지 뜸

    3. 주요 문법
        1) 네스팅 기법 : 선택자 중괄호 안에 다른 하위선택을 하는 것
            ex) .top-area{
                color:black;
                h1{
                    color:red;
                }
            }

        장점)
        (1) 같은 세팅 요소를 선택시 중복된 선택자  
           반복을 하지 않아도 됨
        (2) 같은 구성요소를 묶어서 관리 가능

        2) 속성접두어 묶음기법
            - 반복되는 같은 종류의 하위속성의 
              접두어를 한번만 사용하여 셋팅을 묶어줌
            ex)  
            font: {
                        size: 34pt;
                        family: 'Times New Roman', Times, serif;
                        }

        3) 변수사용기법: 동일하게 사용될 값을 변수에 넣고 디자인을 배치
            - 변수 사용법=> $변수명:값
            - 변수명은 모두 붙여씀
            - 변수명은 케믈케이스 or 케밥케이스로 작성
            - 변수의 범위는 변수를 선언후 하위로 상속되어 값이 유지

        4) 파일 분리기법(import)
            -부분파일을 분리하여 공통모듈로 합쳐서 사용
            - 부분파일명은 사스에서 맨 앞에 언더바를 붙여서 사용하는 것이 원칙이지만
              언더바를 안써도 부분파일 처리를 해줌
            - 파일 호출시 확장자 생략 가능 (ex: @import "reset";) < 자동으로 앞의 언더바와 확장자 생략해줌
            - 일반 css 파일 import와 차이 : http리퀘스트를 하지 않음!
        5) mixin : 일종의 공통css코드를 리턴하는 함수
            (1)셋팅형식
                case1: @mixin 믹스인이름 {css코드}
                case2: @mixin 믹스인이름(변수){css코드}
                case3: @mixin 믹스인이름(변수:기본값) {css코드}

            (2) 믹스인 호출방법 @include 믹스인을 포함하라!!
                ->@include : 믹스인이름;
                ->@include : 믹스인이름(전달값);

        6) 네스팅 이어붙이기 기법: &
            - 가상요소, 가상클래스, 특정클래스를 현재 선택요소에 셋팅하는 방법!
            - &(엠퍼센드) = 현재 선택요소 자신

        7) 반복코드 확장 : @extend (expend: 연장하다, 확장하다)
           (1) 사용이유: 반복되는 같은 셋팅의 클래스를 쉽게 도입한다
           (2) 선택자 코드 안에 [ @extend 클래스명 ]형식으로 사용
           (3) 공통코드 외에 다른 셋팅 속성은 하단에 추가로 구현
           (4) 장점: 공통코드 적용을 위해 각 요소의 클래스를 일일히 주지 않아도 공통코드를 적용할 수 있다!

************************************************************************************/
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
dl,
dt,
dd,
p,
figure,
figcaption {
  margin: 0;
  padding: 0;
}

/* ul,ol 순번,블릿없앰 */
ul, ol, li {
  list-style: none;
}

/* a요소 리셋 */
a {
  color: #222;
  text-decoration: none;
}

/* heading 요소 글자크기 */
h1, h2, h3, h4, h5, h6 {
  font-size: 100%;
  /* 박스 디자인시 글자크기로 인한
  영향을 없애기 위한 초기화! */
}

/* 이미지 초기화 */
img {
  /* 이미지 링크시 서버에서 볼 떄 파란 테두리 나올 시 제거 */
  border: none;
  /* 박스에 이미지만 넣을 떄 엔터간극(4px 하단 공백) 삭제 */
  vertical-align: middle;
}

.wrapper {
  max-width: 1000px;
  margin: 0 auto;
}

.top-area {
  color: #ff6d6d;
}
.top-area h2 {
  font-size: 20px;
  line-height: 1.5;
}
.top-area h1 {
  color: #6f48ca;
  font-size: 34pt;
  font-family: "Times New Roman", Times, serif;
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 4px;
  text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3764705882);
  margin-bottom: 40px;
  background-color: #ffbebe;
  background-image: url(../images/flower.png);
  background-size: 90px;
  background-position: center;
  background-repeat: repeat-x;
  padding: 20px;
}

/* 메인영역 */
.main-area section {
  border-color: pink;
  border-style: dashed;
  border-width: 7px;
  margin-bottom: 50px;
  padding: 20px;
}
.main-area h3 {
  color: darkblue;
  font-size: 34pt;
  font-family: "Times New Roman", Times, serif;
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 4px;
  text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3764705882);
  margin-bottom: 40px;
}
.main-area ul, .main-area ol, .main-area p {
  padding: 0 20px;
  line-height: 2;
  font-size: 24px;
}
.main-area ul li, .main-area ol li, .main-area p li {
  text-decoration: underline;
  text-underline-offset: 10px;
  text-decoration-thickness: 2px;
  text-decoration-color: #d36dff;
  text-align: center;
  background-color: #ff0;
  /* 첫번째 li 강조하기 */
  /* 가상요소 블릿넣기 */
}
.main-area ul li:first-child, .main-area ol li:first-child, .main-area p li:first-child {
  color: blueviolet;
  font-size: 20px;
  text-shadow: 1px 0 #000, -1px 0 #000, 0 1px #000, 0 -1px #000;
}
.main-area ul li::before, .main-area ol li::before, .main-area p li::before {
  content: "🥞";
}

.button-basic, .button-report {
  color: #ff6d6d;
  display: inline-block;
  border: 1px solid #ff6d6d;
  border-radius: 20px;
  padding: 10px 40px;
  font-size: 20px;
  cursor: pointer;
  margin-left: 20px;
}

.box-basic, .bottom-title, .button-box, .top-area h2 {
  text-align: center;
  padding: 20px 0;
}

.button-report {
  background-color: #ff6d6d;
  color: #fff;
}

.button-box {
  background-image: linear-gradient(to top, #ffbebe, transparent);
}

/* 하단 타이틀 */
.bottom-title {
  color: red;
  font-size: 34pt;
  font-family: "Times New Roman", Times, serif;
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 4px;
  text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3764705882);
  margin-bottom: 40px;
}/*# sourceMappingURL=main.css.map */