//회원가입 유효성 검사
export default function validateFn() {
  console.log("검사행");

  /********************************************** 
    [ 사용자 입력폼 유효성 검사 ]
    - 이벤트 종류 : blur(포커스가 빠질때 발생)
    - 제이쿼리 이벤트 메서드 :  blur()
    - 이벤트 대상: 
    ->입력요소 중 text(아이디email2제외),password
        form.logF input[type=text][id!=email2],
        form.logF input[type=password],
    -> 요소뒤 대괄호는 속성선택자(CSS원래문법)
    [id!=email2] !=은 같지않다(제이쿼리용문법)

**********************************************/
  $(`form.logF input[type=text][id!=email2],
  form.logF input[type=password]`).blur(function () {
    /****************************************** 
    1. 현재 블러가 발생한 요소의 아이디는?
******************************************/
    let cId = $(this).attr("id");
    //cId = currentId: 현재 아이디
    //attr("속성명") : 속성값 읽어오기
    /****************************************** 
 2. 현재 블러가 발생한 요소의 값은?
 ******************************************/
    let cv = $(this).val();
    //cv = currentValue : 현재값
    //val() : 입력값 읽어오기
    //trim() : 앞뒤 공백제거, trim은 중간공백 제거 X
    //모든 공백제거 함수 생성하여 사용

    const groSpace = (x) => x.replace(/\s/g, "");
    //get rid of space => groSpace 공백제거 함수
    //정규식: 슬래쉬 사이에 사용, \s: 스페이스, g: global 플래그!
    //플래그(flag) :  기술용어로 처리표시기호를 뜻함
    //공백 제거 후 입력창에 반영시켜준다

    //이름(#mnm)일 경우 중간공백 있어야함
    //삼항연상자로 트림을 함께 사용
    cv = cId == "mnm" ? cv.trim() : groSpace(cv);
    $(this).val(cv);

    console.log("현재 아이디:", cId, "\n값:", cv);

    /************************************* 
    3. 빈값 여부 검사하기 (필수입력항목)
*************************************/
    if (cv == "") {
      //메세지 출력하기
      //형제요소들 중 .msg인 요소에 글자를 출력함
      $(this).siblings(".msg").text("필수입력");
      //형제요소 선택은 siblings()(특정이름)
    } ////////////if

    /**************************************** 
    4. 아이디일 경우 유효성 검사
    - 검사기준: 
    영문자로 시작하는 6~20글자 영문자/숫자
****************************************/
else if(cId == "mid"){

    //검사결과
    // console.log(vReg(cv,cId));

    if(!vReg(cv,cId)){
        //id 검사 불통과시
        //false 결과시 들어와야 하므로 not(!)연산자 사용

        $(this).siblings(".msg").text("영문자로 시작하는 6~20글자 영문자/숫자").removeClass("on");
    }
    else{
        //id 검사 통과시
        
        // 1. DB에 조회하여 같은 아이디가 있다면
            // '이미 사용중인 아이디입니다' 와 같은 메시지출력
            // 2. 만약 DB조회하여 같은 아이다가 없다면
            // '멋진 아이디네요~!'와 같은 메시지출력
            // 여기서 우선은 DB조회 못하므로 통과시 메시지로 출력

        $(this).siblings(".msg").text("멋진 아이디네여 ^^").addClass("on");
        //class on 들어가믄 녹색글자
    }

}/////else if 아이디 유효성 검사

    /**************************************** 
    5. 비밀번호일 경우 유효성 검사
    - 검사기준: 
    특수문자,문자,숫자포함 형태의 5~15자리
****************************************/
else if(cId == "mpw"){

    

}/////else if 아이디 유효성 검사

    /**************************************** 
    6. 비밀번호확인일 경우 유효성 검사
    - 검사기준: 비빌번호 항목과 일치여부
****************************************/
else if(cId == "mpw2"){

    

}/////else if 아이디 유효성 검사

    /**************************************** 
    7. 이메일 유효성 검사
    - 검사기준: 이메일 형식에 맞는지 여부
****************************************/
else if(cId == "email1"){

    

}/////else if 아이디 유효성 검사

/**************************************** 
    8. 모두 통과일 경우 메세지 지우기
****************************************/
else {
    //메세지 지우기
    $(this).siblings(".msg").text("");
  }
  }); /////blurFn end
} ///////////////////validateFn 함수





/*//////////////////////////////////////////////////////
    함수명: vReg (validation with Regular Expression)
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말아라!-싸면문자가됨!)
*///////////////////////////////////////////////////////
function vReg(val, cid) {
    // val - 검사할값, cid - 처리구분아이디
    // console.log("검사:"+val+"/"+cid);

    // 정규식 변수
    let reg;

    // 검사할 아이디에 따라 정규식을 변경함
    switch (cid) {
        case "mid": // 아이디
            reg = /^[a-z]{1}[a-z0-9]{5,19}$/g;
            // 영문자로 시작하는 6~20글자 영문자/숫자
            // /^[a-z]{1} 첫글자는 영문자로 체크!
            // [a-z0-9]{5,19} 첫글자 다음 문자는 영문 또는 숫자로
            // 최소 5글자에서 최대 19글자를 유효범위로 체크!
            // 첫글자 한글자를 더하면 최소 6글자에서 최대 20글자체크!
            break;
        case "mpw": // 비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            // 특수문자,문자,숫자포함 형태의 5~15자리
            // (?=^.{5,15}$) 시작부터 끝까지 전체 5~15자릿수 체크!
            // (?=.*\d) 숫자 사용체크!
            // (?=.*[a-zA-Z]) 영문자 대문자 또는 소문자 사용체크!
            // (?=.*[!@#$%^&+=]) 특수문자 사용체크!
            break;
        case "eml": // 이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            // 이메일 형식에 맞는지 검사하는 정규식
            break;
    } //////////// switch case문 //////////////////

    // //console.log("정규식:"+reg);

    // 정규식 검사를 위한 JS메서드 
    // -> 정규식.test(검사할값) : 결과 true/false
    return reg.test(val); //호출한 곳으로 검사결과리턴!

} //////////// vReg 함수 //////////////////////////////
///////////////////////////////////////////////////////


