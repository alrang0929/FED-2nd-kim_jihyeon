///////////////////////////////////////////////////
// JS4-5. 배열의 복사 /////////////////////////////
///////////////////////////////////////////////////
// 참고) JS코드만 실행 확장프로그램: 
// Code Runner(+ Node JS설치후 리부팅)

///////////////////////////////////////////////////
// 0. 일반값의 변수할당 /////////////////////////////
///////////////////////////////////////////////////

//////////////////////////////////////////////
// 값이 할당된 변수를 다른 변수에 할당시 
// 할당 내용은 크게 두가지로 나눠진다
// [1] 값할당 : 단일 데이터값(문자,숫자,날짜 등)
// [2] 주소할당 : 배열, 객체 
///////////////////////////////////////////////
// 일반적으로 변수에 값을 할당후 다른변수에 할당하면
// 값이 할당된다!
// 그러나... 배열이나 객체를 할당한 변수를 할당하면
// 할당된 다른변수의 배열/객체값을 변경하면 
// 할당원본이 변경된다! 따라서 주소할당이라고 함!
//////////////////////////////////////////////


console.log('0.일반값의 변수할당');

//원본 kk
let kk = 10;
let tt = kk;

//kk를 tt에 할당하면 값복사일까 주소복사일까?
console.log('할당 후 최초 상태:\n',kk,'tt값은?:\n',tt);
tt=200;
console.log('tt변경후 값:\n',kk,'tt값은?:\n',tt);
//일반적인 값은 복사가 맞다!
//그,러.나 배열/객체일경우 컬렉션 집합을 만들고 주소가 관리되기 때문에
//변수에 변수를 할당할때 값이 아닌 주소가 복사됨!


///////////////////////////////////////////////////
// 1. 일반배열의 얕은복사(Shallow Copy) /////////////
///////////////////////////////////////////////////

console.log('1.일반배열의 얕은복사(Shallow Copy)');
let aa = [11,22,33];
console.log('원본aa:',aa);
//즉, 배열 변수를 bb에 할당!
let bb = aa;
console.log('할당 후 최초 상태aa:\n',aa,'bb값은?:\n',bb);

//bb의 특정 배열값을 변경
bb[0] = 777;
console.log(' bb변경 후 최초 상태aa:\n',aa,'bb값은?:\n',bb);


///////////////////////////////////////////////////
// 2.일반배열의 깊은복사(Deep Copy) /////////////////
///////////////////////////////////////////////////

console.log('\n2.일반배열의 깊은복사(Deep Copy)');
let cc = [55,66,77];
console.log('원본CC',cc);

//배열의 값만 새 변수에 할당하면 깊은 복사!
//스프레드 연상자(...) 사용!!! -> [...배열변수]
//스프레드 연상자는 배열의 값만 가져온다!
let dd = [...cc];
//스프레드 연상자 값만 복사 후 새 배열에 특정값 변경
dd[0] = 888;
console.log(' dd변경 후 최초 상태cc:\n',cc,'dd값은?:\n',dd);

///////////////////////////////////////////////////
// 3.객체값 배열의 얕은복사(Shallow Copy) ///////////
///////////////////////////////////////////////////

console.log('\n3.객체값 배열의 얕은복사(Shallow Copy)');

let ee = [{ 김: 55 }, { 이: 66 }, { 박: 77 }];
console.log("원본ee", ee);
let ff = ee;

//배열의 객체값 변경하기
ff[0]["김"] = "999";
console.log(' ff변경 후 최초 상태ee:\n',ee,'ff값은?:\n',ff);

///////////////////////////////////////////////////
// 4.객체값 배열의 깊은복사(Deep Copy) //////////////
///////////////////////////////////////////////////

console.log('\n4.객체값 배열의 깊은복사(Deep Copy)');
let gg = [{ 송: 99 }, { 정: 87 }, { 최: 54 }];
console.log("원본gg", gg);
//배열의 깊은 복사인 스프레드 연상자 할당
// let hh = [...gg]; ==> 효과 없음 ㅠ-ㅠ
// 다시 객체화 해야함!
let hh = JSON.parse(JSON.stringify(gg));
hh[0]["송"] = 888;
console.log('gg변경 후 최초 상태hh:\n',hh,'gg값은?:\n',gg);

// 깊은복사방법은 기존 객체배열값을 문자화하고 다시 객체화한다!
// -> JSON.parse(JSON.stringify(배열값))
//stiringify => 어떤 값이든 문자화!
//parse -> 재포장!
// 원리: 문자화하는 순간 배열이 값으로 변경되어 새로운 주소지가 된다!
// 다시 이값을 배열로 복원하면 깊은복사 완성!!!
// 객체값을 가지는 배열로 검색/정렬할때 복사는 깊은복사를 해야 
// 원본손상이 없다!!!!
