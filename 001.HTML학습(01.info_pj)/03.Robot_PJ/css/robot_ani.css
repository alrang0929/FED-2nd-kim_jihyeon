@charset "utf-8";

/* Robot PJ - 애니메이션 CSS */

/****************************************** 
    [ CSS 애니메이션 ]
    - CSS 속성 변화를 장면으로 구성하여
    애니메이션을 화면에 연출해주는 속성

    [ 애니메이션 키프레임 ]
    - 애니메이션 속성변화를 지정하는 코딩영역

    [ 2장면 코딩법 ]

    @keyframes 키프레임명 {
        from{시작CSS}
        to{끝CSS}
    } 

    또는

    @keyframes 키프레임명 {
        0%{시작CSS}
        100%{끝CSS}
    }
    
    __________________________________

    [ 여러장면 코딩법 ]
    
    @keyframes 키프레임명 {
        0%{시작CSS}
        10%{중간CSS}
        20%{중간CSS}
        ...
        70%{중간CSS}
        90%{중간CSS}
        100%{끝CSS}
    }

    -> 만약 첫장면이 이미 CSS에 설정되어 있으면
    from 또는 0% 를 생략할 수 있다!

    __________________________________

    [ 애니메이션 연출 시간 계산법 ]

    - 내가 지정한 %의 장면은 언제 등장하는가?

    전체시간(초) * 몇% / 100 = 알고싶은시간

    예) 60초 * 50%/100% = 30초
    __________________________________


    [ 설정된 키프레임 호출하는 방법 ]

    animation : 이시이지반방마
    (이름 시간 이징 지연 반복 방향 마지막상태)

    1) 이름(animation-name) : keyframe 이름
    2) 시간(animation-duration) : 애니메이션 동작시간(초단위:s)
    3) 이징(animation-timing-function) : easing 가속도
    4) 지연(animation-delay) : 애니메이션 시작지연시간(초단위:s)
    5) 반복여부(animation-iteration-count) : 애니메이션 반복횟수
        - 기본값 1, 숫자를 쓰면 반복횟수
        - 영원히는 infinite(인피니트)
    6) 방향(animation-direction) : 시작->끝
        - 대체경로 설정하기 : alternate : 시작->끝,끝->시작
        - 대체경로는 반복횟수가 2이상 또는 infinite 이여야함
    7) 마지막상태(animation-fill-mode) : 애니메이션이 끝났을때
        - 처음상태로 돌아가는 것이 기본!(backwards)
        - 마지막 상태를 유지하고 싶을때 forwards(앞쪽에...즉,애니끝장면)



******************************************/

/* 1. 로고애니 */

.logo {
    /* 1초후 5초간 이동애니 세팅 */
    animation: logo-ani 5s linear 1s alternate forwards,
        /* 4초후 스윙애니 영원히 셋팅 */
        swing-ani 0.4s ease-in-out 6s infinite alternate;
}

@keyframes logo-ani {
    0% {
        top: calc(50% + 10vw);
        left: calc(50% + 10vw);
        /* 처음 출발 크기 지정 */
        transform: scale(2);
    }

    /* 처음위치이동: 왼쪽위 */
    20% {
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(0.5);
    }

    /* 두번째위치이동: 오른쪽 위 */
    40% {
        top: calc(0% + 5vw);
        left: calc(100% - 25vw);
        transform: scale(0.5);
    }

    /* 세번쨰위치이동: 우측 하단 */
    60% {
        top: calc(100% - 25vw);
        left: calc(100% - 25vw);
        transform: scale(0.5);
    }

    /* 네번쨰위치이동: 좌측 하단 */
    80% {
        top: calc(100% - 25vw);
        left: calc(0% + 5vw);
        transform: scale(0.5);
    }

    /* 처음 위치로 돌아옴(좌측상단) */
    90% {
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(1);
    }

    /* 다음 스윙애니 각도 준비 */
    100% {
        top: calc(0% + 5vw);
        left: calc(0% + 5vw);
        transform: scale(1);
        transform: rotate(20deg);
    }
}

/* 제자리 스윙 애니 */

@keyframes swing-ani {
    0% {
        /* 앞 스케일값 */
        transform: scale(1);
        transform: rotate(20deg);
    }

    100% {
        /* 앞 스케일값 */
        transform: scale(1);
        transform: rotate(-20deg);
    }
}

/* 2.로봇이동애니 */
.robot-box {
    /* 애니메이션: 이시이지반방마
    - 4초후 4초간 한번만 끝상태 유지
    */
    animation: move-robot 4s ease-in-out 4s alternate forwards;
}

@keyframes move-robot {
    from {
        transform: scale(0.25) translate(301vw, -10vw);
    }

    to {
        transform: scale(0.6) translate(79vw, 5vw);
    }
}

/* 3. 로봇 다리작동애니 */
.leg {
    animation: move-rbleg 0.4s ease-in-out 4s 10 alternate forwards;
    /* 4초 대기 0.4초 애니 시간으로 10번 반복 alternate=> 반대로 작동하는 횟수가
    더해짐 (=from->to 5회, =to->from 5회 ) */
}

.leg2 {
    /* 한쪽다리는 올라간 다음 올라가야 하므로 애니시작 지연시간을 줌 */
    /* 한방향이 0.3초 이므로 0.3초 기다리면 됨+전체 기다리는 시간 +4초*/
    animation-delay: 4.4s;
}

@keyframes move-rbleg {
    100% {
        top: 90%;
    }
}

/* 3. 로봇 왼팔 허리에 올리기 */


/* 팔공통 트랜스폼 세로축 기준 top으로 변경 */
.arm,
.arm span,
.arm span::after {
    transform-origin: top;
}

/* 4. 로봇 왼쪽팔 허리에 올리기 */
.arm1 {
    animation: left-arm-ani1 0.4s 8s forwards;
}

@keyframes left-arm-ani1 {
    to {
        transform: rotate(34deg);
    }
}

/* 왼쪽팔 하단 애니 */
.arm1 span {
    animation: left-arm-ani2 0.4s 8s forwards;
}

@keyframes left-arm-ani2 {
    to {
        transform: rotate(-90deg);
    }
}

/* 왼쪽팔 손 애니 */
.arm1 span::after {
    animation: left-arm-ani3 0.4s 8s forwards;
}

@keyframes left-arm-ani3 {
    to {
        transform: rotate(70deg);
    }
}

.arm2 {
    animation:
        right-arm-ani1 0.4s ease-in-out 8s infinite alternate;
}

@keyframes right-arm-ani1 {

    to {
        transform: rotate(-119deg);
    }
}

/* 오른쪽 팔 */
.arm2 span {
    animation:
        right-arm-ani2 0.4s ease-in-out 10s infinite alternate;
}

@keyframes right-arm-ani2 {
    from {
        transform: rotate(-120deg);
    }
}

/* 오른쪽 팔꿈치  */

.arm2 span::after {
    animation:
        right-arm-ani3 0.4s ease-in-out 10s infinite alternate,
        right-arm-ani4 0.2s 10s forwards;
}

/* 오른손 Y축회전 키프레임 */
@keyframes right-arm-ani4 {
    to {
        transform: rotateY(180deg);
        left: -13px;
    }
}


/* 말풍선 애니메이션 */
.robot-linkbox {
    /* 중심축 변경 */
    /* 로봇쪽에서 크게 해주기 위해 기준 변경(좌측하단) */
    transform-origin: left bottom;

    animation: linkbox-scale .5s ease-in-out 10s forwards;
}

@keyframes linkbox-scale {

    to {
        transform: translateX(200px) scale(1);
    }
}